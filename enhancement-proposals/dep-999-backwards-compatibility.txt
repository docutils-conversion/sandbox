:Title: Public API and Backwards Compatibility Policy
:Author: Günter Milde, Adam Turner, open to all Docutils developers
:Discussions-To: docutils-develop@lists.sf.net, https://sourceforge.net/p/docutils/feature-requests/89/
:Status: Draft
:Type: Process
:Created: 2022-01-21
:Docutils-Version: 0.19


Abstract
========

.. A short (<~200 word) description of the technical issue being addressed.

This proposal defines the public API.

After completing this task, Docutils can move to version 1.0 and start
using `Semantic Versioning`_.


Motivation
==========

.. Clearly explain why the existing specification is inadequate to
   address the problem that the proposal solves.

Docutils has a large user base and is used in production at several
places (Python documentation, Linux kernel documentation, CMake
documentation, readthedocs, ...). OTOH, Docutils has a version number
below 1.0 (widely seen as an indicator of "beta" status of a project) and
is missing a clear policy on version identificator semantics.

The current `Docutils Project Policies`_ section on `version
identifcation`__ concentrates on the formal definition of the version
specificator but leaves open what consists a "major change in the design
or API".

The current `backwards compatibility policy`__ is only a stub referencing
:PEP:`387`.

Clearly defining how we will balance evolution with stability is
important to both users and project developers.

__ ../policies.html#version-identifcation
__ ../policies.html#backwards-compatibility-policy


Rationale
=========

.. Describe why particular design decisions were made.

People affected by changes in Docutils include:

.. class:: description

Authors
  writing or maintaining reStructuredText documents.

End-Users
  of Docutils native `front-end tools`_ (optionally with 3rd-party
  drop-in extensions) or alternative tools using Docutils either as a
  library [#3rd-party-tools]_ or via the command line interface
  (build systems, Makefiles, scripts in other languages).

Developers
  authors and maintainers of

  - projects that use Docutils as a library [#3rd-party-tools]_, 
  - drop-in components [#]_,
  - alternative front-end tools,
  - custom stylesheets (CSS style sheets, LaTeX styles, ODT styles),
    or
  - re-implementations of the `reStructuredText specification`_. [#]_

A person may belong to more than one of these catgories.

.. [#3rd-party-tools] like Sphinx_, rsted_, Leo_, Pelican_, ebookmaker_,
   MyST_, readthedocs_, rinohtype_, …
.. [#] for example parsers like pycmark_ or writers like rst2pdf_ or
   rst2beamer_
.. [#] e.g., PanDoc_ or Text-Restructured_ (prest).


.. _Sphinx: https://www.sphinx-doc.org/
.. _rsted: https://github.com/anru/rsted
.. _Leo: https://leoeditor.com
.. _Pelican: https://docs.getpelican.com/en/latest/
.. _MyST: https://myst-parser.readthedocs.io/
.. _readthedocs: https://readthedocs.org/
.. _pycmark: https://github.com/pycmark/pycmark
.. _rst2pdf: https://rst2pdf.org/
.. _rst2beamer: https://docutils.sourceforge.io/sandbox/rst2beamer/
.. _rinohtype: https://pypi.org/project/rinohtype/
.. _ebookmaker: https://pypi.org/project/ebookmaker/
.. _PanDoc: https://pandoc.org/
.. _Text-Restructured: https://metacpan.org/dist/Text-Restructured


Specification
=============

.. Describe the syntax and semantics of any new feature.

Docutils public APIs are:

* the `reStructuredText specification`_,

* the document type definition (`Docutils Document Tree`_, docutils.dtd_),

* interfaces documented in the `api/`_ section of the project
  documentation,
  
* names, arguments and behaviour of the `front-end tools`_,

* the interface to custom stylesheets --
  elements, macros and classes used by writers to represent doctree_ nodes
  in the output format,

* the core "docutils" Python package API:
    
  - component interfaces as defined by the base
    ``docutils.reader.Reader``, ``docutils.writer.Writer``, and
    ``docutils.transform.Transform`` classes,

  - behaviour [#]_ and names of all objects included in the ``__all__``
    attribute of their parent objects. 

Python objects and variables can explicitly "opt-out" of the public API
with a docstring noting that the object is provisional_.

Objects not included in their parents ``__all__`` attribute are
considered public if they are documented. 
Undocumented objects should be assumed to be internal.

.. TODO:
   include also
   provided output templates [#]_ and style sheets [#]_ (unless marked as
   "provisional") ?

   .. [#] template.txt, default.tex, titlepage.tex, xelatex.tex
   .. [#] html4css1.css, minimal.css, docutils.sty (LaTeX), styles.odt


.. [#] Cf. the `backwards compatibility rules`_ in :PEP:`387`.


Security Implications
=====================

If required, critical bug fixes may change the public API without advance
warning.


How to Teach This
=================

.. How to teach users, new and experienced, 
   how to apply the proposal to their work.

* Move the specification_ to the `Docutils Project Policies`_.

* Keep the `api/`_ documentation up to date.

* Generate "docutils" package API documentation from the docstrings:

  - Fix/enhance/add docstrings to improve the output of `pydoc`_.
    
  - Generate API documentation with Sphinx:
  
    - nicely format rST docstrings
    - include attribute docstrings (ignored by pydoc_).

.. _pydoc: https://docs.python.org/3/library/pydoc.html


Rejected Ideas
==============

.. Why certain ideas that were brought while discussing this proposal were not
   ultimately pursued.

* Use type annotations as an indication of status in the public API.

  - There is no known precedence for this approach.
  - Type annotations may be helpful also for non-public code.

* Use Calendar Versioning (CalVer).

  - Would be a break from current versioning.
  - Docutils does not have a fixed release schedule.
  - The release date is documented in the HISTORY_ and RELEASE-NOTES_.

* Enumerate all modules, classes, and functions that form the public API.


Open Issues
===========

.. Any points that are still being decided/discussed.

* Differentiate between "core API" and "extended API"?

  Cf. the `Docutils Project Policies`_

    When Docutils reaches version 1.0, the major APIs will be considered
    frozen

    The major number [...] may be incremented later if there is a major
    change in the design or API.

* Mark all private objects with a prefix underscore?

* Formalise the wording for docstrings for public/private/provisional
  (ideally this would be a single regex pattern)?

* Define a deprecation period

  - In addition to SemVer_ (i.e. also for changes in "major" releases,
    interdicting *all* incompatible changes in "minor" releases).

  - Instead of SemVer_ (i.e. for "minor/medium" changes in "minor"
    releases, similar to :PEP:`387`).


.. _SemVer: Semantic Versioning_

References
==========

.. A collection of URLs used as references through the proposal.

.. _api/: ../../docutils/docs/index.html
          #api-api-reference-material-for-client-developers
.. _doctree:
.. _Docutils Document Tree: ../../docutils/docs/ref/doctree.html
.. _docutils.dtd: ../../docutils/docs/ref/docutils.dtd
.. _Docutils Design Specification: ../../docutils/docs/peps/pep-0258.html
.. _Docutils Project Policies: ../../docutils/docs/dev/policies.html
.. _front-end tools: ../../docutils/docs/user/tools.html
.. _HISTORY: ../../docutils/HISTORY.html
.. _RELEASE-NOTES: ../../docutils/RELEASE-NOTES.html
.. _reStructuredText specification:
    ../../docutils/docs/ref/rst/restructuredtext.html

.. _backwards compatibility rules:
    https://www.python.org/dev/peps/pep-0387/#backwards-compatibility-rules
.. _provisional: https://docs.python.org/3/glossary.html#term-provisional-API
.. _Semantic Versioning: https://semver.org/

Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.



..
    Local Variables:
    mode: indented-text
    indent-tabs-mode: nil
    sentence-end-double-space: t
    fill-column: 70
    coding: utf-8
    End:
